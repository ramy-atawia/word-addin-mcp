version: '3.8'

services:

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wordaddin-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wordaddin-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend FastAPI Application with integrated MCP
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: wordaddin-backend
    environment:
      # Cache
      - REDIS_URL=redis://redis:6379
      
      # FastAPI Configuration
      - FASTAPI_HOST=0.0.0.0
      - FASTAPI_PORT=9000
      - FASTAPI_RELOAD=false
      - ENVIRONMENT=production
      - DEBUG=false
      
      # CORS Configuration
      - ALLOWED_ORIGINS=["*"]
      - ALLOWED_HOSTS=["*"]
      
      # MCP Configuration
      - MCP_SERVER_URL=https://localhost:9000
      
      # Internal MCP Server Configuration
      - INTERNAL_MCP_HOST=localhost
      - INTERNAL_MCP_PORT=8001
      - INTERNAL_MCP_PATH=/mcp
      - INTERNAL_MCP_URL=http://localhost:8001/mcp
      - EXPOSE_MCP_PUBLICLY=false
      - APP_STARTER_MODE=true
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      
      # API Keys (from .env file)
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_CSE_ID=${GOOGLE_CSE_ID}
      - PATENTSVIEW_API_KEY=${PATENTSVIEW_API_KEY}
    ports:
      - "9000:9000"  # Backend API
      - "8001:8001"  # Internal MCP Server
    volumes:
      - ./logs:/app/logs
      - uploads_data:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - wordaddin-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend Word Add-in (Development)
  frontend-dev:
    build:
      context: "./Novitai MCP"
      dockerfile: Dockerfile.simple
    container_name: wordaddin-frontend-dev
    environment:
      - NODE_ENV=development
      - REACT_APP_API_BASE_URL=http://backend:9000
      - WEBPACK_DEV_SERVER_HOST=0.0.0.0
      - WEBPACK_DEV_SERVER_PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - "./Novitai MCP:/app"
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - wordaddin-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    profiles:
      - dev

  # Frontend Word Add-in (Production)
  frontend-prod:
    build:
      context: "./Novitai MCP"
      dockerfile: Dockerfile
      target: production
    container_name: wordaddin-frontend-prod
    environment:
      - NODE_ENV=production
    ports:
      - "3000:443"
      - "3080:80"
    depends_on:
      - backend
    networks:
      - wordaddin-network
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - prod

  # SSL Certificate Generator Service
  ssl-generator:
    image: alpine:latest
    container_name: wordaddin-ssl-generator
    volumes:
      - office_certs:/certs
    command: >
      sh -c "
        apk add --no-cache openssl &&
        if [ ! -f /certs/localhost.crt ]; then
          echo 'Generating Office Add-in development certificates...' &&
          mkdir -p /certs &&
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /certs/localhost.key \
            -out /certs/localhost.crt \
            -config <(
            echo '[dn]'
            echo 'CN=localhost'
            echo '[req]'
            echo 'distinguished_name = dn'
            echo '[v3_req]'
            echo 'subjectAltName = @alt_names'
            echo '[alt_names]'
            echo 'DNS.1 = localhost'
            echo 'DNS.2 = *.localhost'
            echo 'IP.1 = 127.0.0.1'
            echo 'IP.2 = ::1'
            ) \
            -extensions v3_req \
            -subj '/CN=localhost' &&
          chmod 644 /certs/localhost.crt &&
          chmod 600 /certs/localhost.key &&
          echo 'SSL certificates generated successfully!'
        else
          echo 'SSL certificates already exist.'
        fi
      "
    networks:
      - wordaddin-network
    restart: "no"

volumes:
  redis_data:
    driver: local
  uploads_data:
    driver: local
  frontend_node_modules:
    driver: local
  office_certs:
    driver: local

networks:
  wordaddin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
