# Azure DevOps Pipeline for AKS Deployment
trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - backend/*
      - Novitai MCP/*
      - docker-compose.yml
      - k8s/*

variables:
  azureServiceConnection: 'wordaddin-mcp-connection'
  containerRegistry: 'wordaddinregistry.azurecr.io'
  imageRepository: 'wordaddin-mcp'
  containerRegistryServiceConnection: 'wordaddin-acr-connection'
  dockerfilePath: '$(Build.SourcesDirectory)'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  aksClusterName: 'wordaddin-mcp-aks'
  resourceGroupName: 'wordaddin-mcp-rg'

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push backend image
      inputs:
        command: buildAndPush
        repository: '$(imageRepository)-backend'
        dockerfile: '$(dockerfilePath)/backend/Dockerfile'
        containerRegistry: $(containerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Build and push frontend image
      inputs:
        command: buildAndPush
        repository: '$(imageRepository)-frontend'
        dockerfile: '$(dockerfilePath)/Novitai MCP/Dockerfile'
        containerRegistry: $(containerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Build and push MCP server image
      inputs:
        command: buildAndPush
        repository: '$(imageRepository)-mcp-server'
        dockerfile: '$(dockerfilePath)/middleware/Dockerfile'
        containerRegistry: $(containerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/k8s'
        artifactName: 'k8s-manifests'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy Infrastructure'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create resource group if it doesn't exist
                az group create --name $(resourceGroupName) --location "East US"
                
                # Deploy Bicep template for AKS
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file $(Build.SourcesDirectory)/azure-deployment/aks/bicep/main.bicep \
                  --parameters aksClusterName=$(aksClusterName)

          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing

          - task: Kubernetes@1
            displayName: 'Deploy to Kubernetes'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureServiceConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: wordaddin-mcp
                ---
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: app-config
                  namespace: wordaddin-mcp
                data:
                  ENVIRONMENT: "production"
                  MCP_SERVER_PORT: "9001"
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: app-secrets
                  namespace: wordaddin-mcp
                type: Opaque
                data:
                  postgres-connection-string: $(base64PostgresConnectionString)
                  redis-connection-string: $(base64RedisConnectionString)
                  storage-connection-string: $(base64StorageConnectionString)

          - task: Kubernetes@1
            displayName: 'Deploy Backend Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureServiceConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: backend
                  namespace: wordaddin-mcp
                spec:
                  replicas: 3
                  selector:
                    matchLabels:
                      app: backend
                  template:
                    metadata:
                      labels:
                        app: backend
                    spec:
                      containers:
                      - name: backend
                        image: $(containerRegistry)/$(imageRepository)-backend:$(tag)
                        ports:
                        - containerPort: 8000
                        env:
                        - name: DATABASE_URL
                          valueFrom:
                            secretKeyRef:
                              name: app-secrets
                              key: postgres-connection-string
                        - name: REDIS_URL
                          valueFrom:
                            secretKeyRef:
                              name: app-secrets
                              key: redis-connection-string
                        - name: AZURE_STORAGE_CONNECTION_STRING
                          valueFrom:
                            secretKeyRef:
                              name: app-secrets
                              key: storage-connection-string
                        - name: ENVIRONMENT
                          valueFrom:
                            configMapKeyRef:
                              name: app-config
                              key: ENVIRONMENT
                        resources:
                          requests:
                            memory: "512Mi"
                            cpu: "250m"
                          limits:
                            memory: "1Gi"
                            cpu: "500m"
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8000
                          initialDelaySeconds: 30
                          periodSeconds: 10
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8000
                          initialDelaySeconds: 5
                          periodSeconds: 5
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: backend-service
                  namespace: wordaddin-mcp
                spec:
                  selector:
                    app: backend
                  ports:
                  - port: 80
                    targetPort: 8000
                  type: ClusterIP

          - task: Kubernetes@1
            displayName: 'Deploy Frontend Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureServiceConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: frontend
                  namespace: wordaddin-mcp
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: frontend
                  template:
                    metadata:
                      labels:
                        app: frontend
                    spec:
                      containers:
                      - name: frontend
                        image: $(containerRegistry)/$(imageRepository)-frontend:$(tag)
                        ports:
                        - containerPort: 3000
                        env:
                        - name: REACT_APP_API_URL
                          value: "https://backend-service.wordaddin-mcp.svc.cluster.local"
                        - name: REACT_APP_ENVIRONMENT
                          valueFrom:
                            configMapKeyRef:
                              name: app-config
                              key: ENVIRONMENT
                        resources:
                          requests:
                            memory: "256Mi"
                            cpu: "125m"
                          limits:
                            memory: "512Mi"
                            cpu: "250m"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: frontend-service
                  namespace: wordaddin-mcp
                spec:
                  selector:
                    app: frontend
                  ports:
                  - port: 80
                    targetPort: 3000
                  type: ClusterIP

          - task: Kubernetes@1
            displayName: 'Deploy MCP Server Service'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureServiceConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: mcp-server
                  namespace: wordaddin-mcp
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: mcp-server
                  template:
                    metadata:
                      labels:
                        app: mcp-server
                    spec:
                      containers:
                      - name: mcp-server
                        image: $(containerRegistry)/$(imageRepository)-mcp-server:$(tag)
                        ports:
                        - containerPort: 9001
                        env:
                        - name: MCP_SERVER_PORT
                          valueFrom:
                            configMapKeyRef:
                              name: app-config
                              key: MCP_SERVER_PORT
                        - name: ENVIRONMENT
                          valueFrom:
                            configMapKeyRef:
                              name: app-config
                              key: ENVIRONMENT
                        resources:
                          requests:
                            memory: "256Mi"
                            cpu: "125m"
                          limits:
                            memory: "512Mi"
                            cpu: "250m"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: mcp-server-service
                  namespace: wordaddin-mcp
                spec:
                  selector:
                    app: mcp-server
                  ports:
                  - port: 80
                    targetPort: 9001
                  type: ClusterIP

          - task: Kubernetes@1
            displayName: 'Deploy Ingress'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureServiceConnection)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: wordaddin-mcp-ingress
                  namespace: wordaddin-mcp
                  annotations:
                    kubernetes.io/ingress.class: nginx
                    cert-manager.io/cluster-issuer: letsencrypt-prod
                    nginx.ingress.kubernetes.io/ssl-redirect: "true"
                spec:
                  tls:
                  - hosts:
                    - wordaddin-mcp.example.com
                    secretName: wordaddin-mcp-tls
                  rules:
                  - host: wordaddin-mcp.example.com
                    http:
                      paths:
                      - path: /api
                        pathType: Prefix
                        backend:
                          service:
                            name: backend-service
                            port:
                              number: 80
                      - path: /mcp
                        pathType: Prefix
                        backend:
                          service:
                            name: mcp-server-service
                            port:
                              number: 80
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: frontend-service
                            port:
                              number: 80