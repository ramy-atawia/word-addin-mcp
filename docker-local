#!/bin/bash

# Docker Local Development Manager
# Usage: ./docker-local [command]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project name
PROJECT_NAME="word-addin-mcp"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker Desktop and try again."
        exit 1
    fi
}

# Function to start all services
start_services() {
    print_status "Starting local development environment..."
    check_docker
    
    # Start services with dev profile (frontend-dev)
    docker-compose --profile dev up -d
    
    print_status "Waiting for services to be healthy..."
    sleep 10
    
    # Check service status
    if docker-compose ps | grep -q "Up (healthy)"; then
        print_success "All services started successfully!"
        print_status "Services available at:"
        print_status "  Backend API: http://localhost:9000"
        print_status "  Frontend: https://localhost:3000"
        print_status "  Database: localhost:5432"
        print_status "  Redis: localhost:6379"
    else
        print_warning "Some services may still be starting up. Check status with: ./docker-local status"
    fi
}

# Function to stop all services
stop_services() {
    print_status "Stopping local development environment..."
    docker-compose down
    print_success "All services stopped."
}

# Function to restart all services
restart_services() {
    print_status "Restarting local development environment..."
    stop_services
    sleep 2
    start_services
}

# Function to show service status
show_status() {
    print_status "Service Status:"
    docker-compose ps
    echo ""
    print_status "Service Health:"
    docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
}

# Function to show logs
show_logs() {
    local service=${1:-""}
    if [ -n "$service" ]; then
        print_status "Showing logs for $service..."
        docker-compose logs -f "$service"
    else
        print_status "Showing logs for all services..."
        docker-compose logs -f
    fi
}

# Function to build services
build_services() {
    print_status "Building all services..."
    docker-compose build --no-cache
    print_success "Build completed."
}

# Function to clean up
cleanup() {
    print_status "Cleaning up Docker resources..."
    docker-compose down -v --remove-orphans
    docker system prune -f
    print_success "Cleanup completed."
}

# Function to show help
show_help() {
    echo "Docker Local Development Manager"
    echo ""
    echo "Usage: ./docker-local [command]"
    echo ""
    echo "Commands:"
    echo "  start     Start all services (default)"
    echo "  stop      Stop all services"
    echo "  restart   Restart all services"
    echo "  status    Show service status"
    echo "  logs      Show logs (optionally specify service name)"
    echo "  build     Build all services"
    echo "  cleanup   Stop services and clean up Docker resources"
    echo "  help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./docker-local start"
    echo "  ./docker-local logs backend"
    echo "  ./docker-local status"
}

# Main script logic
case "${1:-start}" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    build)
        build_services
        ;;
    cleanup)
        cleanup
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
