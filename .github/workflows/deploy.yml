# Complete deployment pipeline with all fixes applied
# PROD BRANCH: Deploy secure dev architecture to production Azure resources
# CLEAN DEPLOYMENT: Fresh production environment after resource cleanup
name: Deployment Pipeline

on:
  push:
    branches: [ main, dev, prod ]
  workflow_dispatch:

env:
  # Use Azure Container Registry for both environments
  ACR_NAME: novitaiwordmcp
  ACR_LOGIN_SERVER: novitaiwordmcp.azurecr.io
  BACKEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-backend' || (github.ref == 'refs/heads/prod' && 'novitai-word-mcp-backend') || 'novitai-word-mcp-backend-dev' }}
  FRONTEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-frontend' || (github.ref == 'refs/heads/prod' && 'novitai-word-mcp-frontend') || 'novitai-word-mcp-frontend-dev' }}
  RESOURCE_GROUP: novitai-word-mcp-rg

jobs:
  # Pre-deployment Tests
  test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/prod' && 'production') || 'development' }}
    outputs:
      tests-passed: ${{ steps.test-results.outputs.all-passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Install Python dependencies
        cd backend
        pip install -r requirements.txt
        cd ..
        
        # Install test dependencies
        pip install -r requirements-test.txt

    - name: Run Backend Unit Tests
      run: |
        echo "Running backend unit tests..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/backend"
        if ! python -m pytest tests/ -v --tb=short; then
          echo "Backend unit tests failed"
          exit 1
        fi

    - name: Run Patent Search Tests
      run: |
        echo "Running patent search unit tests..."
        if ! python -m pytest tests/backend/test_patent_search_unit.py -v; then
          echo "Patent search tests failed"
          exit 1
        fi

    - name: Run Frontend Linting
      run: |
        cd "Novitai MCP"
        echo "Running frontend linting..."
        if [ -f "package.json" ]; then
          npm install
          if npm run lint; then
            echo "Frontend linting passed"
          else
            echo "Frontend linting failed - continuing with deployment"
            echo "Note: Frontend linting issues need to be fixed manually"
          fi
        else
          echo "No package.json found, skipping linting"
        fi

    - name: Validate Configuration Files
      run: |
        echo "Validating configuration files..."
        
        # Check if required files exist
        test -f backend/app/core/config.py || (echo "Missing config.py" && exit 1)
        test -f "Novitai MCP/webpack.config.js" || (echo "Missing webpack.config.js" && exit 1)
        test -f ".github/workflows/deploy.yml" || (echo "Missing deploy.yml" && exit 1)
        
        # Validate JSON files
        python -c "import json; json.load(open('backend/configured_mcp_servers.json'))" || (echo "Invalid JSON in configured_mcp_servers.json" && exit 1)
        
        echo "All configuration files are valid"

    - name: Test Docker Build (Backend)
      run: |
        echo "Testing backend Docker build..."
        cd backend
        if ! docker build --platform linux/amd64 -t test-backend:latest --target production .; then
          echo "Backend Docker build failed"
          exit 1
        fi
        echo "Backend Docker build successful"

    - name: Test Docker Build (Frontend)
      run: |
        echo "Testing frontend Docker build..."
        cd "Novitai MCP"
        if ! docker build --platform linux/amd64 -t test-frontend:latest \
          --build-arg REACT_APP_API_BASE_URL=https://test-backend.azurewebsites.net \
          --build-arg REACT_APP_AUTH0_DOMAIN=test.auth0.com \
          --build-arg REACT_APP_AUTH0_CLIENT_ID=test-client \
          --build-arg REACT_APP_AUTH0_AUDIENCE=test-audience \
          .; then
          echo "Frontend Docker build failed"
          exit 1
        fi
        echo "Frontend Docker build successful"

    - name: Test Results Summary
      id: test-results
      run: |
        echo "All pre-deployment tests passed!"
        echo "all-passed=true" >> $GITHUB_OUTPUT

  # Deploy to Development
  deploy-development:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev' && needs.test.outputs.tests-passed == 'true'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Validate Required Secrets
      run: |
        echo "Validating all required secrets are available..."
        
        secrets_missing=false
        
        # Check all required secrets
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "Missing required secret: AZURE_CREDENTIALS"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.ACR_USERNAME }}" ]; then
          echo "Missing required secret: ACR_USERNAME"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.ACR_PASSWORD }}" ]; then
          echo "Missing required secret: ACR_PASSWORD"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AUTH0_CLIENT_SECRET }}" ]; then
          echo "Missing required secret: AUTH0_CLIENT_SECRET"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AZURE_OPENAI_API_KEY }}" ]; then
          echo "Missing required secret: AZURE_OPENAI_API_KEY"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AZURE_OPENAI_ENDPOINT }}" ]; then
          echo "Missing required secret: AZURE_OPENAI_ENDPOINT"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.GOOGLE_API_KEY }}" ]; then
          echo "Missing required secret: GOOGLE_API_KEY"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.GOOGLE_CSE_ID }}" ]; then
          echo "Missing required secret: GOOGLE_CSE_ID"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.PATENTSVIEW_API_KEY }}" ]; then
          echo "Missing required secret: PATENTSVIEW_API_KEY"
          secrets_missing=true
        fi
        
        if [ "$secrets_missing" = true ]; then
          exit 1
        fi
        
        echo "All required secrets are available"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:dev
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        platforms: linux/amd64
        build-args: |
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:dev
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha

    - name: Deploy Backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Configure Backend Environment Variables
      run: |
        echo "Setting up backend environment variables..."
        
        # Generate unique secret key for development
        SECRET_KEY=$(openssl rand -base64 32)
        
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ENVIRONMENT=development \
          LOG_LEVEL=DEBUG \
          DEBUG=false \
          PORT=9000 \
          SECRET_KEY="$SECRET_KEY" \
          ALLOWED_ORIGINS='["https://novitai-word-mcp-frontend-dev.azurewebsites.net"]' \
          ALLOWED_HOSTS='["*"]' \
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
          AZURE_OPENAI_DEPLOYMENT=gpt-4o-mini \
          AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini \
          AZURE_OPENAI_API_VERSION=2024-02-15-preview \
          AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }} \
          PATENTSVIEW_API_KEY=${{ secrets.PATENTSVIEW_API_KEY }} \
          INTERNAL_MCP_HOST=localhost \
          INTERNAL_MCP_PORT=8001 \
          INTERNAL_MCP_PATH=/mcp \
          EXPOSE_MCP_PUBLICLY=false \
          MAX_FILE_SIZE=10485760 \
          WEBSITE_HTTPLOGGING_RETENTION_DAYS=3 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          DOCKER_ENABLE_CI=true \
          SCM_DO_BUILD_DURING_DEPLOYMENT=1

    - name: Set ACR Password for Backend
      run: |
        echo "Setting ACR password for backend..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings DOCKER_REGISTRY_SERVER_PASSWORD="$ACR_PASSWORD"

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Configure Frontend Environment Variables
      run: |
        echo "Setting up frontend environment variables..."
        az webapp config appsettings set --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net \
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net \
          REACT_APP_FRONTEND_URL=https://novitai-word-mcp-frontend-dev.azurewebsites.net \
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          NODE_ENV=production \
          DOCKER_ENABLE_CI=true

    - name: Wait for Deployment with Health Check
      run: |
        echo "Waiting for deployment to become healthy..."
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" >/dev/null 2>&1; then
            echo "Deployment is healthy after ${attempt} attempts"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Deployment failed to become healthy after $max_attempts attempts"
            exit 1
          fi
          
          echo "Attempt $attempt/$max_attempts failed, waiting 10 seconds..."
          sleep 10
          ((attempt++))
        done

    - name: Get Auth0 M2M token
      id: auth0_token
      run: |
        set -eu
        echo "Requesting Auth0 machine-to-machine token..."
        
        resp=$(curl -s -X POST "https://dev-bktskx5kbc655wcl.us.auth0.com/oauth/token" \
          -H "content-type: application/json" \
          -d '{"client_id":"INws849yDXaC6MZVXnLhMJi6CZC4nx6U","client_secret":"'"${{ secrets.AUTH0_CLIENT_SECRET }}"'","audience":"INws849yDXaC6MZVXnLhMJi6CZC4nx6U","grant_type":"client_credentials"}')
        
        token=$(echo "$resp" | jq -r '.access_token // empty')
        if [ -z "$token" ]; then
          echo "Failed to obtain Auth0 token"
          exit 1
        fi
        
        echo "AUTH0_TEST_TOKEN=$token" >> $GITHUB_ENV
        echo "Successfully obtained Auth0 token"

    - name: Run Post-Deployment Tests
      run: |
        echo "Running comprehensive post-deployment tests..."
        
        # Test 1: Backend Health Check
        echo "Testing backend health..."
        health_response=$(curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" || echo '{"status":"error"}')
        health_status=$(echo "$health_response" | jq -r '.status // "unknown"')
        
        if [ "$health_status" != "healthy" ]; then
          echo "Backend health check failed: $health_status"
          echo "Response: $health_response"
          exit 1
        fi
        echo "Backend health check passed: $health_status"
        
        # Test 2: MCP Tools Count
        echo "Testing MCP tools loading..."
        tools_response=$(curl -s -H "Authorization: Bearer $AUTH0_TEST_TOKEN" "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/v1/mcp/tools" || echo '{"tools":[]}')
        tools_count=$(echo "$tools_response" | jq '.tools | length // 0')
        
        if [ "$tools_count" -lt 4 ]; then
          echo "MCP tools count check failed: Expected at least 4, got $tools_count"
          exit 1
        fi
        echo "MCP tools check passed: $tools_count tools loaded"
        
        # Test 3: Web Search Functionality
        echo "Testing web search functionality..."
        search_response=$(curl -s -X POST "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/v1/mcp/agent/chat" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $AUTH0_TEST_TOKEN" \
          -d '{"message": "Search for test", "session_id": "deployment-test"}' || echo '{"success":false}')
        
        if echo "$search_response" | grep -q "Web Search Results"; then
          search_length=$(echo "$search_response" | wc -c)
          echo "Web search test passed: $search_length characters returned"
        else
          echo "Web search test failed: No search results found"
          echo "Response preview: $(echo "$search_response" | head -c 200)..."
          exit 1
        fi
        
        # Test 4: API Endpoints Availability
        echo "Testing API endpoints availability..."
        endpoints=("/health" "/api/v1/mcp/tools" "/api/v1/debug/config")
        
        for endpoint in "${endpoints[@]}"; do
          http_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $AUTH0_TEST_TOKEN" "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net$endpoint")
          if [ "$http_code" -ne 200 ]; then
            echo "API endpoint $endpoint returned HTTP $http_code"
            exit 1
          fi
          echo "API endpoint $endpoint is accessible (HTTP $http_code)"
        done
        
        # Test 5: Patent Search Functionality
        echo "Testing patent search functionality..."
        patent_response=$(curl -s --max-time 300 -X POST "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/v1/mcp/tools/prior_art_search_tool/execute" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $AUTH0_TEST_TOKEN" \
          -d '{"parameters": {"query": "5G handover using AI"}}' || echo '{}')
        
        if echo "$patent_response" | grep -q "Prior Art Search Report"; then
          echo "Patent search test passed: Report generated successfully"
        else
          echo "Patent search test failed: No report generated"
          echo "Response: $(echo "$patent_response" | head -c 200)..."
          exit 1
        fi
        
        echo "All post-deployment tests passed successfully!"

    - name: Notify development deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Development deployment SUCCESSFUL for ${{ github.repository }}#${{ github.run_number }}"
          echo "All tests passed and deployment completed"
        else
          echo "Development deployment FAILED for ${{ github.repository }}#${{ github.run_number }}"
          echo "Check the logs for details"
        fi
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.outputs.tests-passed == 'true'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Validate Required Secrets
      run: |
        echo "Validating all required secrets are available..."
        
        secrets_missing=false
        
        # Check all required secrets
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "Missing required secret: AZURE_CREDENTIALS"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.ACR_USERNAME }}" ]; then
          echo "Missing required secret: ACR_USERNAME"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.ACR_PASSWORD }}" ]; then
          echo "Missing required secret: ACR_PASSWORD"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AUTH0_CLIENT_SECRET }}" ]; then
          echo "Missing required secret: AUTH0_CLIENT_SECRET"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AZURE_OPENAI_API_KEY }}" ]; then
          echo "Missing required secret: AZURE_OPENAI_API_KEY"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.AZURE_OPENAI_ENDPOINT }}" ]; then
          echo "Missing required secret: AZURE_OPENAI_ENDPOINT"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.GOOGLE_API_KEY }}" ]; then
          echo "Missing required secret: GOOGLE_API_KEY"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.GOOGLE_CSE_ID }}" ]; then
          echo "Missing required secret: GOOGLE_CSE_ID"
          secrets_missing=true
        fi
        if [ -z "${{ secrets.PATENTSVIEW_API_KEY }}" ]; then
          echo "Missing required secret: PATENTSVIEW_API_KEY"
          secrets_missing=true
        fi
        
        if [ "$secrets_missing" = true ]; then
          exit 1
        fi
        
        echo "All required secrets are available"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:latest
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        platforms: linux/amd64
        build-args: |
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend.azurewebsites.net
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend.azurewebsites.net
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha

    - name: Deploy Backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Configure Backend Environment Variables
      run: |
        echo "Setting up backend environment variables..."
        
        # Generate unique secret key for production
        SECRET_KEY=$(openssl rand -base64 32)
        
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ENVIRONMENT=production \
          LOG_LEVEL=INFO \
          DEBUG=false \
          PORT=9000 \
          SECRET_KEY="$SECRET_KEY" \
          ALLOWED_ORIGINS='["https://novitai-word-mcp-frontend.azurewebsites.net"]' \
          ALLOWED_HOSTS='["*"]' \
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
          AZURE_OPENAI_DEPLOYMENT=gpt-4o-mini \
          AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini \
          AZURE_OPENAI_API_VERSION=2024-02-15-preview \
          AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }} \
          PATENTSVIEW_API_KEY=${{ secrets.PATENTSVIEW_API_KEY }} \
          INTERNAL_MCP_HOST=localhost \
          INTERNAL_MCP_PORT=8001 \
          INTERNAL_MCP_PATH=/mcp \
          EXPOSE_MCP_PUBLICLY=false \
          MAX_FILE_SIZE=10485760 \
          WEBSITE_HTTPLOGGING_RETENTION_DAYS=3 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          DOCKER_ENABLE_CI=true \
          SCM_DO_BUILD_DURING_DEPLOYMENT=1

    - name: Set ACR Password for Backend
      run: |
        echo "Setting ACR password for backend..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings DOCKER_REGISTRY_SERVER_PASSWORD="$ACR_PASSWORD"

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Configure Frontend Environment Variables
      run: |
        echo "Setting up frontend environment variables..."
        az webapp config appsettings set --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend.azurewebsites.net \
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend.azurewebsites.net \
          REACT_APP_FRONTEND_URL=https://novitai-word-mcp-frontend.azurewebsites.net \
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          NODE_ENV=production \
          DOCKER_ENABLE_CI=true

    - name: Wait for Deployment with Health Check
      run: |
        echo "Waiting for deployment to become healthy..."
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" >/dev/null 2>&1; then
            echo "Deployment is healthy after ${attempt} attempts"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Deployment failed to become healthy after $max_attempts attempts"
            exit 1
          fi
          
          echo "Attempt $attempt/$max_attempts failed, waiting 10 seconds..."
          sleep 10
          ((attempt++))
        done

    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        
        # Basic health check
        if ! curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" >/dev/null 2>&1; then
          echo "Production backend health check failed"
          exit 1
        fi
        echo "Production backend health check passed"

    - name: Create GitHub release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify production deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Production deployment SUCCESSFUL for ${{ github.repository }}#${{ github.run_number }}"
        else
          echo "Production deployment FAILED for ${{ github.repository }}#${{ github.run_number }}"
        fi
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Deploy to Production (from prod branch)
  deploy-production-prod:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/prod' && needs.test.outputs.tests-passed == 'true'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Validate Required Secrets
      run: |
        echo "Validating all required secrets are available..."
        
        secrets_missing=false
        
        # Check all required secrets
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "❌ AZURE_CREDENTIALS is missing"
          secrets_missing=true
        fi
        
        if [ -z "${{ secrets.AZURE_OPENAI_API_KEY }}" ]; then
          echo "❌ AZURE_OPENAI_API_KEY is missing"
          secrets_missing=true
        fi
        
        if [ -z "${{ secrets.AZURE_OPENAI_ENDPOINT }}" ]; then
          echo "❌ AZURE_OPENAI_ENDPOINT is missing"
          secrets_missing=true
        fi
        
        if [ -z "${{ secrets.GOOGLE_API_KEY }}" ]; then
          echo "❌ GOOGLE_API_KEY is missing"
          secrets_missing=true
        fi
        
        if [ -z "${{ secrets.GOOGLE_CSE_ID }}" ]; then
          echo "❌ GOOGLE_CSE_ID is missing"
          secrets_missing=true
        fi
        
        if [ -z "${{ secrets.PATENTSVIEW_API_KEY }}" ]; then
          echo "❌ PATENTSVIEW_API_KEY is missing"
          secrets_missing=true
        fi
        
        # SECRET_KEY is generated dynamically, not from secrets
        
        if [ "$secrets_missing" = true ]; then
          echo "❌ One or more required secrets are missing. Please check the repository secrets."
          exit 1
        fi
        
        echo "✅ All required secrets are available"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.ACR_NAME }}

    - name: Build and push Backend image
      run: |
        echo "Building backend image..."
        docker buildx build \
          --platform linux/amd64 \
          --file backend/Dockerfile \
          --target production \
          --tag ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }} \
          --tag ${{ env.ACR_LOGIN_SERVER }}/backend:latest \
          --push \
          backend/

    - name: Build and push Frontend image
      run: |
        echo "Building frontend image..."
        docker buildx build \
          --platform linux/amd64 \
          --file "Novitai MCP/Dockerfile" \
          --target production \
          --tag ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} \
          --tag ${{ env.ACR_LOGIN_SERVER }}/frontend:latest \
          --push \
          "Novitai MCP/"

    - name: Deploy Backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Generate Secret Key
      run: |
        echo "Generating secret key..."
        SECRET_KEY=$(openssl rand -base64 32)
        echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV

    - name: Configure Backend Environment Variables
      run: |
        echo "Setting up backend environment variables..."
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ENVIRONMENT=production \
          LOG_LEVEL=INFO \
          DEBUG=false \
          PORT=9000 \
          SECRET_KEY="$SECRET_KEY" \
          ALLOWED_ORIGINS='["https://novitai-word-mcp-frontend.azurewebsites.net"]' \
          ALLOWED_HOSTS='["*"]' \
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
          AZURE_OPENAI_DEPLOYMENT=gpt-4o-mini \
          AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini \
          AZURE_OPENAI_API_VERSION=2024-02-15-preview \
          AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }} \
          PATENTSVIEW_API_KEY=${{ secrets.PATENTSVIEW_API_KEY }} \
          INTERNAL_MCP_HOST=localhost \
          INTERNAL_MCP_PORT=8001 \
          INTERNAL_MCP_PATH=/mcp \
          INTERNAL_MCP_URL=http://localhost:8001/mcp \
          EXPOSE_MCP_PUBLICLY=false \
          APP_STARTER_MODE=true \
          MAX_FILE_SIZE=10485760 \
          WEBSITE_HTTPLOGGING_RETENTION_DAYS=3 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          DOCKER_ENABLE_CI=true \
          SCM_DO_BUILD_DURING_DEPLOYMENT=1

    - name: Set ACR Password for Backend
      run: |
        echo "Setting ACR password for backend..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings DOCKER_REGISTRY_SERVER_PASSWORD="$ACR_PASSWORD"

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Configure Frontend Environment Variables
      run: |
        echo "Setting up frontend environment variables..."
        az webapp config appsettings set --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend.azurewebsites.net \
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend.azurewebsites.net \
          REACT_APP_FRONTEND_URL=https://novitai-word-mcp-frontend.azurewebsites.net \
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          NODE_ENV=production \
          DOCKER_ENABLE_CI=true

    - name: Wait for Deployment with Health Check
      run: |
        echo "Waiting for deployment to become healthy..."
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" >/dev/null 2>&1; then
            echo "Deployment is healthy after ${attempt} attempts"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Deployment failed to become healthy after $max_attempts attempts"
            exit 1
          fi
          
          echo "Attempt $attempt/$max_attempts failed, waiting 10 seconds..."
          sleep 10
          attempt=$((attempt + 1))
        done

    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        
        # Basic health check
        if ! curl -s -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" >/dev/null 2>&1; then
          echo "Production backend health check failed"
          exit 1
        fi
        echo "Production backend health check passed"

    - name: Deployment Status
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Production deployment SUCCESSFUL for ${{ github.repository }}#${{ github.run_number }}"
        else
          echo "Production deployment FAILED for ${{ github.repository }}#${{ github.run_number }}"
        fi
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Rollback (if needed)
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-production-prod]
    if: always() && ((needs.deploy-production.result == 'failure' && github.ref == 'refs/heads/main') || (needs.deploy-production-prod.result == 'failure' && github.ref == 'refs/heads/prod'))
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Rollback to previous version
      run: |
        echo "Rolling back production deployment..."
        # Rollback to previous image tag (latest)
        az webapp config container set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/backend:latest
        
        az webapp config container set --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

    - name: Verify rollback
      run: |
        echo "Verifying rollback..."
        sleep 30
        if curl -f "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health"; then
          echo "Rollback verification successful"
        else
          echo "Rollback verification failed"
          exit 1
        fi

    - name: Notify rollback
      run: |
        echo "Production rollback completed for ${{ github.repository }}#${{ github.run_number }}"
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"