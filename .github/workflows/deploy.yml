name: Deployment Pipeline

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production

env:
  # Use Azure Container Registry for both environments
  ACR_NAME: ${{ github.ref == 'refs/heads/main' && 'novitaiwordmcp' || 'novitaiwordmcpdev' }}
  ACR_LOGIN_SERVER: ${{ github.ref == 'refs/heads/main' && 'novitaiwordmcp.azurecr.io' || 'novitaiwordmcpdev.azurecr.io' }}
  BACKEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-backend' || 'novitai-word-mcp-backend-dev' }}
  FRONTEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-frontend' || 'novitai-word-mcp-frontend-dev' }}
  RESOURCE_GROUP: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-rg' || 'novitai-word-mcp-dev-rg' }}

jobs:
  # Deploy to Development
  deploy-development:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:dev
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:dev
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Run development smoke tests
      run: |
        echo "Running smoke tests on development environment..."
        sleep 30  # Wait for deployment to complete
        curl -f https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health || exit 1
        echo "âœ… Development backend health check passed"

    - name: Notify development deployment
      if: always()
      run: |
        echo "ðŸš€ Development deployment ${{ job.status }} for ${{ github.repository }}#${{ github.run_number }}"
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:latest
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        sleep 30  # Wait for deployment to complete
        curl -f https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health || exit 1
        echo "âœ… Production backend health check passed"

    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Notify production deployment
      if: always()
      run: |
        echo "ðŸš€ Production deployment ${{ job.status }} for ${{ github.repository }}#${{ github.run_number }}"
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Rollback (if needed)
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback to previous version
      run: |
        echo "Rolling back production deployment..."
        # Add your rollback commands here
        # Example: kubectl rollout undo deployment/backend
        # Example: docker-compose -f docker-compose.production.yml up -d

    - name: Verify rollback
      run: |
        echo "Verifying rollback..."
        # Add your verification commands here
        # Example: curl -f http://production.example.com/health

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'ðŸ”„ Production rollback completed for ${{ github.repository }}#${{ github.run_number }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
