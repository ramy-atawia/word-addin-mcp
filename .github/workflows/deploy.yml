name: Deployment Pipeline

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production

env:
  # Use Azure Container Registry for both environments
  ACR_NAME: novitaiwordmcp
  ACR_LOGIN_SERVER: novitaiwordmcp.azurecr.io
  BACKEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-backend' || 'novitai-word-mcp-backend-dev' }}
  FRONTEND_APP_NAME: ${{ github.ref == 'refs/heads/main' && 'novitai-word-mcp-frontend' || 'novitai-word-mcp-frontend-dev' }}
  RESOURCE_GROUP: novitai-word-mcp-rg

jobs:
  # Pre-deployment Tests for Development
  test-development:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    outputs:
      tests-passed: ${{ steps.test-results.outputs.all-passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run Backend Unit Tests
      run: |
        cd backend
        echo "Running backend unit tests..."
        python -m pytest tests/ -v --tb=short || echo "No unit tests found, skipping..."

    - name: Run Frontend Linting
      run: |
        cd "Novitai MCP"
        echo "Running frontend linting..."
        npm install || echo "No package.json found, skipping..."
        npm run lint || echo "No lint script found, skipping..."

    - name: Validate Configuration Files
      run: |
        echo "Validating configuration files..."
        
        # Check if required files exist
        test -f backend/app/core/config.py || (echo "‚ùå Missing config.py" && exit 1)
        test -f "Novitai MCP/webpack.config.js" || (echo "‚ùå Missing webpack.config.js" && exit 1)
        test -f ".github/workflows/deploy.yml" || (echo "‚ùå Missing deploy.yml" && exit 1)
        
        # Validate JSON files
        python -c "import json; json.load(open('backend/configured_mcp_servers.json'))" || (echo "‚ùå Invalid JSON in configured_mcp_servers.json" && exit 1)
        
        echo "‚úÖ All configuration files are valid"

    - name: Test Docker Build (Backend)
      run: |
        echo "Testing backend Docker build..."
        cd backend
        docker build --platform linux/amd64 -t test-backend:latest --target production . || (echo "‚ùå Backend Docker build failed" && exit 1)
        echo "‚úÖ Backend Docker build successful"

    - name: Test Docker Build (Frontend)
      run: |
        echo "Testing frontend Docker build..."
        cd "Novitai MCP"
        docker build --platform linux/amd64 -t test-frontend:latest \
          --build-arg REACT_APP_API_BASE_URL=https://test-backend.azurewebsites.net \
          --build-arg REACT_APP_AUTH0_DOMAIN=test.auth0.com \
          --build-arg REACT_APP_AUTH0_CLIENT_ID=test-client \
          --build-arg REACT_APP_AUTH0_AUDIENCE=test-audience \
          . || (echo "‚ùå Frontend Docker build failed" && exit 1)
        echo "‚úÖ Frontend Docker build successful"

    - name: Validate Environment Variables
      run: |
        echo "Validating required environment variables..."
        
        # Check if all required secrets are available
        required_secrets=(
          "AZURE_CREDENTIALS"
          "ACR_USERNAME" 
          "ACR_PASSWORD"
          "AZURE_OPENAI_API_KEY"
          "AZURE_OPENAI_ENDPOINT"
          "GOOGLE_API_KEY"
          "GOOGLE_CSE_ID"
          "PATENTSVIEW_API_KEY"
        )
        
        for secret in "${required_secrets[@]}"; do
          if [ -z "${!secret:-}" ]; then
            echo "‚ùå Missing required secret: $secret"
            exit 1
          fi
        done
        
        echo "‚úÖ All required secrets are available"

    - name: Test Results Summary
      id: test-results
      run: |
        echo "‚úÖ All pre-deployment tests passed!"
        echo "all-passed=true" >> $GITHUB_OUTPUT

  # Deploy to Development (only if tests pass)
  deploy-development:
    runs-on: ubuntu-latest
    needs: test-development
    if: github.ref == 'refs/heads/dev' && needs.test-development.outputs.tests-passed == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:dev
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        platforms: linux/amd64
        build-args: |
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:dev
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Configure Backend Environment Variables
      run: |
        echo "Setting up backend environment variables..."
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          ENVIRONMENT=development \
          LOG_LEVEL=DEBUG \
          DEBUG=false \
          PORT=9000 \
          SECRET_KEY=K9MHoSnUTr7ia6L9jaXQD8MZF4Eo/bxciBHmlTQQySg= \
          ALLOWED_ORIGINS='["https://novitai-word-mcp-frontend-dev.azurewebsites.net"]' \
          ALLOWED_HOSTS='["*"]' \
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
          AZURE_OPENAI_DEPLOYMENT=gpt-4o-mini \
          AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini \
          AZURE_OPENAI_API_VERSION=2024-02-15-preview \
          AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }} \
          PATENTSVIEW_API_KEY=${{ secrets.PATENTSVIEW_API_KEY }} \
          MAX_FILE_SIZE=10485760 \
          WEBSITE_HTTPLOGGING_RETENTION_DAYS=3 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          DOCKER_ENABLE_CI=true \
          SCM_DO_BUILD_DURING_DEPLOYMENT=1

    - name: Set ACR Password for Backend
      run: |
        echo "Setting ACR password for backend..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)
        az webapp config appsettings set --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings DOCKER_REGISTRY_SERVER_PASSWORD="$ACR_PASSWORD"

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Configure Frontend Environment Variables
      run: |
        echo "Setting up frontend environment variables..."
        az webapp config appsettings set --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings \
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net \
          REACT_APP_BACKEND_URL=https://novitai-word-mcp-backend-dev.azurewebsites.net \
          REACT_APP_FRONTEND_URL=https://novitai-word-mcp-frontend-dev.azurewebsites.net \
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com \
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U \
          NODE_ENV=production \
          DOCKER_ENABLE_CI=true

    - name: Wait for Deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60

    - name: Run Post-Deployment Tests
      run: |
        echo "Running comprehensive post-deployment tests..."
        
        # Test 1: Backend Health Check
        echo "üîç Testing backend health..."
        BACKEND_HEALTH=$(curl -s "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health" | jq -r '.status')
        if [ "$BACKEND_HEALTH" != "healthy" ]; then
          echo "‚ùå Backend health check failed: $BACKEND_HEALTH"
          exit 1
        fi
        echo "‚úÖ Backend health check passed: $BACKEND_HEALTH"
        
        # Test 2: MCP Tools Count
        echo "üîç Testing MCP tools loading..."
        TOOLS_COUNT=$(curl -s "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/v1/mcp/tools" | jq '.tools | length')
        if [ "$TOOLS_COUNT" -lt 5 ]; then
          echo "‚ùå MCP tools count check failed: Expected 5, got $TOOLS_COUNT"
          exit 1
        fi
        echo "‚úÖ MCP tools check passed: $TOOLS_COUNT tools loaded"
        
        # Test 3: Web Search Functionality
        echo "üîç Testing web search functionality..."
        SEARCH_RESPONSE=$(curl -s -X POST "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/v1/mcp/agent/chat" \
          -H "Content-Type: application/json" \
          -d '{"message": "Search for test", "session_id": "deployment-test"}')
        
        SEARCH_SUCCESS=$(echo "$SEARCH_RESPONSE" | jq -r '.success')
        SEARCH_TOOL=$(echo "$SEARCH_RESPONSE" | jq -r '.tool_name')
        SEARCH_LENGTH=$(echo "$SEARCH_RESPONSE" | jq -r '.response | length')
        
        if [ "$SEARCH_SUCCESS" != "true" ] || [ "$SEARCH_TOOL" != "web_search_tool" ] || [ "$SEARCH_LENGTH" -lt 100 ]; then
          echo "‚ùå Web search test failed:"
          echo "  Success: $SEARCH_SUCCESS"
          echo "  Tool: $SEARCH_TOOL"
          echo "  Length: $SEARCH_LENGTH"
          exit 1
        fi
        echo "‚úÖ Web search test passed: $SEARCH_LENGTH characters returned"
        
        # Test 4: Frontend Configuration
        echo "üîç Testing frontend configuration..."
        FRONTEND_BACKEND_URL=$(curl -s "https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net" | grep -o 'window\.BACKEND_URL = [^;]*')
        if [[ ! "$FRONTEND_BACKEND_URL" == *"novitai-word-mcp-backend-dev.azurewebsites.net"* ]]; then
          echo "‚ùå Frontend backend URL check failed: $FRONTEND_BACKEND_URL"
          exit 1
        fi
        echo "‚úÖ Frontend configuration test passed: $FRONTEND_BACKEND_URL"
        
        # Test 5: API Endpoints Availability
        echo "üîç Testing API endpoints availability..."
        ENDPOINTS=(
          "/health"
          "/api/v1/mcp/tools"
          "/debug/config"
        )
        
        for endpoint in "${ENDPOINTS[@]}"; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net$endpoint")
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "‚ùå API endpoint $endpoint returned HTTP $HTTP_CODE"
            exit 1
          fi
          echo "‚úÖ API endpoint $endpoint is accessible (HTTP $HTTP_CODE)"
        done
        
        echo "üéâ All post-deployment tests passed successfully!"

    - name: Notify development deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Development deployment SUCCESSFUL for ${{ github.repository }}#${{ github.run_number }}"
          echo "‚úÖ All tests passed and deployment completed"
        else
          echo "‚ùå Development deployment FAILED for ${{ github.repository }}#${{ github.run_number }}"
          echo "üîç Check the logs for details"
        fi
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/backend:latest
          ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
        cache-from: type=gha

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./Novitai MCP
        push: true
        platforms: linux/amd64
        build-args: |
          REACT_APP_API_BASE_URL=https://novitai-word-mcp-backend.azurewebsites.net
          REACT_APP_AUTH0_DOMAIN=dev-bktskx5kbc655wcl.us.auth0.com
          REACT_APP_AUTH0_CLIENT_ID=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
          REACT_APP_AUTH0_AUDIENCE=INws849yDXaC6MZVXnLhMJi6CZC4nx6U
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        cache-from: type=gha

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

    - name: Deploy Frontend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FRONTEND_APP_NAME }}
        images: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        sleep 30  # Wait for deployment to complete
        curl -f https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/health || exit 1
        echo "‚úÖ Production backend health check passed"

    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Notify production deployment
      if: always()
      run: |
        echo "üöÄ Production deployment ${{ job.status }} for ${{ github.repository }}#${{ github.run_number }}"
        echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"

  # Rollback (if needed)
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback to previous version
      run: |
        echo "Rolling back production deployment..."
        # Add your rollback commands here
        # Example: kubectl rollout undo deployment/backend
        # Example: docker-compose -f docker-compose.production.yml up -d

    - name: Verify rollback
      run: |
        echo "Verifying rollback..."
        # Add your verification commands here
        # Example: curl -f http://production.example.com/health

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üîÑ Production rollback completed for ${{ github.repository }}#${{ github.run_number }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
